package com.tanlian.wallet.widget.dialog;

import android.annotation.SuppressLint;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.drawable.GradientDrawable;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.tanlian.wallet.R;
import com.tanlian.wallet.utils.DensityUtil;


public class YunBaseDialog extends Dialog {
    private CharSequence message;

    public YunBaseDialog(Context context, int theme) {
        super(context, theme);
    }

    public YunBaseDialog(Context context) {
        super(context);
    }

//    @Override
//    public void onBackPressed() {
//
//    }

    public String getMessage() {
        return message.toString();
    }

    public void setMessage(CharSequence message) {
        this.message = message;
    }

    @Override
    public void show() {
        super.show();
        setCanceledOnTouchOutside(true);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST);
    }

    public void showCanceledOnTouchOutside(boolean cancel) {
        show();
        setCanceledOnTouchOutside(cancel);
    }

    public interface AfterToDo {
        void after(String content);
    }

    public static class Builder {
        public static final int LEFT_BUTTON = DialogInterface.BUTTON_NEGATIVE;
        public static final int RIGHT_BUTTON = DialogInterface.BUTTON_POSITIVE;
        protected OnClickListener onClickListener;
        private Context context;
        private String title;
        private CharSequence content;
        private String leftButtonText;
        private String rightButtonText;
        private Button mButtonLeft;
        private Button mButtonRight;
        private LinearLayout mLayoutContent;
        private LinearLayout mLayoutMessage;
        private View mViewLine;
        private TextView mTexViewTitle;
        private View mView;
        private View messageView;
        private int titleBgColor;
        private int titleColor;
        private int leftColorId;
        private int rightColorId;
        private int layoutId = 0;
        private int dialogWidth = 303;
        private int dialogHeight = 0;
        private boolean haveTitle;
        private boolean isShowBottom = true;
        private DialogType type = DialogType.TYPE_NORMAL;
        private LinearLayout ll_bottom;
        private boolean isShowLine = true;
        private View v_line;


        public Builder(Context context) {
            this.context = context;
        }

        public Builder setTitle(String title) {
            this.title = title;
            return this;
        }

        public Builder setShowLine(boolean ShowLine) {
            isShowLine = ShowLine;
            return this;
        }

        public Builder setShowBottom(boolean showBottom) {
            isShowBottom = showBottom;
            return this;
        }


        public Builder setMessage(CharSequence content) {
            this.content = content;
            return this;
        }

        public Builder setButtonType(DialogType type) {
            this.type = type;
            return this;
        }

        public Builder setTitleBgColor(int color) {
            titleBgColor = color;
            return this;
        }

        public Builder setTitleColor(int color) {
            titleColor = color;
            return this;
        }

        public Builder haveTitle(boolean haveTitle) {
            this.haveTitle = haveTitle;
            return this;
        }

        public Builder setLeftButtonText(String leftButtonText) {
            this.leftButtonText = leftButtonText;
            return this;
        }

        public Builder setOnClickListener(OnClickListener listener) {
            this.onClickListener = listener;
            return this;
        }

        public Builder setRightButtonText(String rightButtonText) {
            this.rightButtonText = rightButtonText;
            return this;
        }

        public Builder setLeftButtonColor(int color) {
            this.leftColorId = color;
            return this;
        }

        public Builder setRightButtonColor(int color) {
            this.rightColorId = color;
            return this;
        }

        public Builder setLayoutID(int id) {
            this.layoutId = id;
            this.mView = null;
            return this;
        }

        public Builder setView(View view) {
            this.mView = view;
            return this;
        }

        public Builder setMessageView(View view) {
            this.messageView = view;
            return this;
        }

        public Builder setLayoutWH(int wPx, int hPx) {
            this.dialogWidth = wPx;
            this.dialogHeight = hPx;
            return this;
        }

        public Builder setDialogHeight(int height) {
            this.dialogHeight = height;
            return this;
        }



        @SuppressLint("Override")
        public YunBaseDialog create() {
            if (context == null) return null;
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            final YunBaseDialog dialog = new YunBaseDialog(context, R.style.Dialog);
            dialog.setMessage(content);
            if (mView != null) {
                dialog.setContentView(mView);
            }else {
                if (mView == null && layoutId != 0) {
                    mView = inflater.inflate(layoutId, null);
                } else if (mView == null) {
                    mView = inflater.inflate(R.layout.dialog_base_two_button, null);
                }
                dialog.setContentView(mView);
                mButtonLeft = mView.findViewById(R.id.but_left);
                mButtonRight = mView.findViewById(R.id.but_right);
                mTexViewTitle = mView.findViewById(R.id.tv_title);
                mLayoutContent = mView.findViewById(R.id.ll_content);
                mViewLine = mView.findViewById(R.id.view_line);
                mLayoutMessage = mView.findViewById(R.id.ll_message);
                ll_bottom = mView.findViewById(R.id.ll_bottom);
                v_line = mView.findViewById(R.id.v_line);

                setOnLeftListener(dialog);
                if (mButtonRight != null) {
                    mButtonRight.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
//						rightClickListener.onClick(dialog, DialogInterface.BUTTON_NEUTRAL);
                            if (onClickListener != null) {
                                onClickListener.onClick(dialog, DialogInterface.BUTTON_POSITIVE);
                            }

                        }
                    });
                }

                if (isShowLine) {
                    v_line.setVisibility(View.VISIBLE);
                } else {
                    v_line.setVisibility(View.GONE);
                }

                if (haveTitle) {
                    mLayoutContent.setBackground(ContextCompat.getDrawable(context, R.drawable.shape_bg_common_dialog_content));
                    mTexViewTitle.setVisibility(View.VISIBLE);
                } else {
                    if (mTexViewTitle != null) {
                        mTexViewTitle.setVisibility(View.GONE);
                        mLayoutContent.setBackground(ContextCompat.getDrawable(context, R.drawable.shape_bg_common_dialog_content_notitle));
                    }
                }

                if (isShowBottom) {
                    ll_bottom.setVisibility(View.VISIBLE);
                } else {
                    ll_bottom.setVisibility(View.GONE);
                }

                if (!TextUtils.isEmpty(title)) {
                    mTexViewTitle.setText(title);
                }

                if (messageView != null) {
                    mLayoutMessage.addView(messageView);
                    TextView mTexViewContent = mView.findViewById(R.id.tv_content);
                    mTexViewContent.setVisibility(View.GONE);
                } else {
                    if (content != null) {
                        TextView mTexViewContent = mView.findViewById(R.id.tv_content);
                        mTexViewContent.setVisibility(View.VISIBLE);
                        mTexViewContent.setText(content);
                    }
                }

                if (!TextUtils.isEmpty(leftButtonText) && mButtonLeft != null) {
                    mButtonLeft.setVisibility(View.VISIBLE);
                    if (TextUtils.isEmpty(rightButtonText)) {
                        mViewLine.setVisibility(View.GONE);
                    } else {
                        mViewLine.setVisibility(View.VISIBLE);
                    }
                    mButtonLeft.setText(leftButtonText);
                } else if (mButtonLeft != null) {
                    mButtonLeft.setVisibility(View.GONE);
                    mViewLine.setVisibility(View.GONE);
                    if (rightButtonText != null && mButtonRight != null) {
                        mButtonRight.setBackgroundResource(R.drawable.selector_click_dialog);
                    }
                }

                if (mButtonRight != null) {
                    if (type == DialogType.TYPE_NORMAL) {
                        mButtonRight.setTextColor(ContextCompat.getColor(context, R.color.color_common_dialog_right_text));
                    } else if (type == DialogType.TYPE_RIGHT_RED) {
                        mButtonRight.setTextColor(ContextCompat.getColor(context, R.color.color_common_dialog_right_text_red));
                    }
                }

                if (rightButtonText != null && mButtonRight != null) {
                    mButtonRight.setText(rightButtonText);
                    mButtonRight.setVisibility(View.VISIBLE);
                    if (TextUtils.isEmpty(leftButtonText)) {
                        mViewLine.setVisibility(View.GONE);
                    } else {
                        mViewLine.setVisibility(View.VISIBLE);
                    }
                } else if (mButtonRight != null) {
                    mButtonRight.setVisibility(View.GONE);
                    mViewLine.setVisibility(View.GONE);
                    if (mButtonLeft != null && mButtonLeft != null) {
                        mButtonLeft.setBackgroundResource(R.drawable.selector_click_dialog);
                    }
                }


                if (leftColorId != 0 && mButtonLeft != null) {
                    mButtonLeft.setTextColor(context.getResources().getColor(leftColorId));
                }
                if (rightColorId != 0 && mButtonRight != null) {
                    mButtonRight.setTextColor(context.getResources().getColor(rightColorId));
                }

                if (haveTitle) {
                    if (titleBgColor != 0) {
                        GradientDrawable drawable = (GradientDrawable) mTexViewTitle.getBackground();
                        drawable.setColor(titleBgColor);
                    } else {
                        GradientDrawable drawable = (GradientDrawable) mTexViewTitle.getBackground();
                        drawable.setColor(ContextCompat.getColor(context, R.color.color_common_dialog_title_bg));
                    }

                    if (titleColor != 0) {
                        mTexViewTitle.setTextColor(titleColor);
                    }
                }
            }


            if (DensityUtil.getWindowWidth(context) > DensityUtil.dp2px(400)) {
                ViewGroup.LayoutParams params = mView.getLayoutParams();
                if (params != null) {
                    params.width = DensityUtil.getWindowWidth(context) - DensityUtil.dp2px(80);
                    if (dialogHeight > 300) {
                        params.height = dialogHeight;
                    }
                }else {
                    if (dialogHeight > 300) {
                        params = new ViewGroup.LayoutParams(DensityUtil.getWindowWidth(context) - DensityUtil.dp2px(80), dialogHeight);
                    }else {
                        params = new ViewGroup.LayoutParams(DensityUtil.getWindowWidth(context) - DensityUtil.dp2px(80), ViewGroup.LayoutParams.WRAP_CONTENT);
                    }
                }
                dialog.setContentView(mView,params);
            }else {
                ViewGroup.LayoutParams params = mView.getLayoutParams();
                if (dialogHeight > 300 && params != null) {
                    params.height = dialogHeight;
                    dialog.setContentView(mView,params);
                }else {
                    dialog.setContentView(mView);
                }
            }

            return dialog;
        }

        private void setOnLeftListener(final YunBaseDialog dialog) {
            if (mButtonLeft != null) {
                mButtonLeft.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (onClickListener != null)
                            onClickListener.onClick(dialog, DialogInterface.BUTTON_NEGATIVE);
                    }
                });
            }
        }




        public enum DialogType {
            TYPE_NORMAL, TYPE_RIGHT_RED
        }
    }
}
