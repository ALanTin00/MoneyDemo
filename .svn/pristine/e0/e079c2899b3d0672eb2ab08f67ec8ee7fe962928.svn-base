package com.tanlian.wallet.wallet.dialog;

import android.app.Dialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.support.v4.content.FileProvider;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.blankj.utilcode.util.LogUtils;
import com.blankj.utilcode.util.ToastUtils;
import com.tanlian.wallet.R;
import com.tanlian.wallet.base.App;
import com.tanlian.wallet.base.BaseDialogFragment;
import com.tanlian.wallet.utils.DebounceIntervalClick;

import java.io.File;
import java.text.DecimalFormat;
import java.text.NumberFormat;

import androidkun.com.versionupdatelibrary.entity.Config;
import androidkun.com.versionupdatelibrary.entity.FileBean;

import static com.umeng.socialize.utils.ContextUtil.getPackageName;

public class NewVersionDetecedDialog2 extends BaseDialogFragment {
    private OnUpdateNowListener onUpdateNowListener;
    TextView versionNameText;
    TextView desText;
    TextView close;

    TextView updateNow;
    ProgressBar progressBar;
    TextView downloadProgressTv;


    String versionName;
    double size;
    String des;
    boolean isForcedUpdate;
    boolean isInstall = false;
    private boolean isConfirmUpdate;
    private DialogInterface.OnDismissListener listener;
    private ForcedUpdateBroadcastReceiver forcedUpdateBroadcastReceiver;

    FileBean curFile;

    private boolean isRegister = false;
    private boolean isExit = false;

    public static NewVersionDetecedDialog2 getInstance() {
        NewVersionDetecedDialog2 dialog = new NewVersionDetecedDialog2();

        return dialog;
    }

    public void setParams(String versionName, double size, String des, boolean isForcedUpdate) {
        Bundle bundle = new Bundle();
        bundle.putString("versionName", versionName);
        bundle.putDouble("size", size);
        bundle.putString("des", des);
        bundle.putBoolean("isForcedUpdate", isForcedUpdate);
        this.setArguments(bundle);
    }
    public void setOnUpdateNowListener(OnUpdateNowListener onUpdateNowListener) {
        this.onUpdateNowListener = onUpdateNowListener;
    }

    @Override
    protected int setContentLayout() {
        return R.layout.dialog_new_version_2;
    }

    @Override
    protected void initView(Dialog dialog) {

        forcedUpdateBroadcastReceiver = new ForcedUpdateBroadcastReceiver(this);
        if (!isRegister) {
            IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction(Config.ACTION_REFRESH);
            intentFilter.addAction(Config.ACTION_ERROR);
            intentFilter.addAction(Config.ACTION_FININSHED);
            intentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
            App.getApp().registerReceiver(forcedUpdateBroadcastReceiver, intentFilter);
            isRegister = true;
        }
        versionName = getArguments().getString("versionName");
        size = getArguments().getDouble("size");
        des = getArguments().getString("des");
        isForcedUpdate = getArguments().getBoolean("isForcedUpdate");
        dialog.setCanceledOnTouchOutside(!isForcedUpdate);
        close = dialog.findViewById(R.id.close);

        versionNameText = dialog.findViewById(R.id.dialog_version_name_text);
        desText = dialog.findViewById(R.id.dialog_newversion_des_text);
        updateNow = dialog.findViewById(R.id.dialog_update_now);

        progressBar = dialog.findViewById(R.id.progressBar);
        downloadProgressTv = dialog.findViewById(R.id.download_progress_tv);


        updateNow.setVisibility(View.VISIBLE);
        progressBar.setVisibility(View.GONE);
        downloadProgressTv.setVisibility(View.GONE);

        if (isForcedUpdate) {
            close.setVisibility(View.GONE);
        }

        NumberFormat nf_2 = new DecimalFormat("#0.00");
        LogUtils.e("version name     " + versionName);
        versionNameText.setText(versionName);
        double realSize = size / 1024;
        downloadProgressTv.setText("0M/" + nf_2.format(realSize) + "M");

        if (des!=null){
            String[] str = des.split(";");
            String conten = "";
            int num = 0;
            for (int i = 0; i < str.length; i++) {
                num = i + 1;
                conten = conten + num + "." + str[i] + "。" + "\n";
            }

            if (str.length > 1) {
                desText.setText(conten);
            } else {
                desText.setText(des);
            }

        }

        close.setOnClickListener(new DebounceIntervalClick() {
            @Override
            public void onDebounceClick(View v) {
                dismiss();
            }
        });

        updateNow.setOnClickListener(new DebounceIntervalClick() {
            @Override
            public void onDebounceClick(View v) {
                if (isInstall) {
                    if (curFile != null)
                        installPage(curFile, App.getApp());
                } else {
                    isConfirmUpdate = true;
                    onUpdateNowListener.updateNow();
                    if (isForcedUpdate) {
                        updateNow.setVisibility(View.GONE);
                        progressBar.setVisibility(View.VISIBLE);
                        downloadProgressTv.setVisibility(View.VISIBLE);
                        dialog.setCancelable(false);
                    } else
                        dismiss();
                }
            }
        });
    }

    @Override
    public void show(FragmentManager manager, String tag) {
        isConfirmUpdate = false;
        isExit = false;
        super.show(manager, tag);
    }

    @Override
    public void onResume() {
        super.onResume();


    }

    @Override
    public void onStop() {
        super.onStop();


    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (isRegister) {
            App.getApp().unregisterReceiver(forcedUpdateBroadcastReceiver);
            isRegister = false;
        }
        if (!isExit) {
            isExit = true;
            onUpdateNowListener.onDismiss(isForcedUpdate, isConfirmUpdate);
        }

    }

    @Override
    public void onDismiss(DialogInterface dialog) {
        super.onDismiss(dialog);
        if (!isExit) {
            isExit = true;
            onUpdateNowListener.onDismiss(isForcedUpdate, isConfirmUpdate);
        }
    }

    public interface OnUpdateNowListener {
        void updateNow();

        void updateLater();

        void onDismiss(boolean isForcedUpdate, boolean isConfirm);
    }
//
//    @Override
//    protected boolean setDefaultCauseAble() {
//        return !isForcedUpdate;
//    }

    private class ForcedUpdateBroadcastReceiver extends BroadcastReceiver {
        NewVersionDetecedDialog2 dialog;

        public ForcedUpdateBroadcastReceiver(NewVersionDetecedDialog2 dialog) {
            this.dialog = dialog;
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (action.equals(Config.ACTION_REFRESH)) {
                FileBean fileBean = (FileBean) intent.getSerializableExtra("FileBean");
                DecimalFormat df = new DecimalFormat("#.##");
                int progress = (int) (fileBean.getFinished() * 1.0f / fileBean.getLength() * 1.0f * 100);
                int speed = intent.getIntExtra("Speed", 0);
                String format = df.format(speed * 1.0 / 1024);
                Log.e("update version", String.valueOf(progress));
                updataNofication(progress, fileBean.getFinished(), fileBean.getLength(), format);
            }

            if (action.equals(Config.ACTION_ERROR)) {
                updateNow.setVisibility(View.VISIBLE);
                updateNow.setText("重新下载");
                progressBar.setVisibility(View.GONE);
                downloadProgressTv.setVisibility(View.GONE);
                progressBar.setProgress(0);
                //dialog.setCancelable(true);
                isConfirmUpdate = false;
            }

            if (action.equals(Config.ACTION_FININSHED)) {
                updateNow.setVisibility(View.VISIBLE);
                progressBar.setVisibility(View.GONE);
                downloadProgressTv.setVisibility(View.GONE);
                progressBar.setProgress(0);
                //dialog.setCancelable(true);
                isConfirmUpdate = false;
                FileBean fileBean = (FileBean) intent.getSerializableExtra("FileBean");
                if (fileBean != null) {
                    updateNow.setText("立刻安装");
                    curFile = fileBean;
                    isInstall = true;
                } else
                    updateNow.setText("重新下载");
                //installPage(fileBean, context);
            }

            if (action.equals(ConnectivityManager.CONNECTIVITY_ACTION)) {
                ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
                NetworkInfo mobNetInfo = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
                NetworkInfo wifiNetInfo = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);

                if (!mobNetInfo.isConnected() && !wifiNetInfo.isConnected()) {
                    //网络连接已断开
                    ToastUtils.showShort("网络连接断开");
                } else {
                    //ToastUtils.showShort("网络连接恢复，继续下载");
                }
            }
        }
    }

    private void updataNofication(int progress, int done, int totalSize, String speed) {
        progressBar.setProgress(progress);
        NumberFormat nf = new DecimalFormat("#0.00");
        String doneS = nf.format(done * 1.0 / 1024 / 1024) + "MB";
        String totalS = nf.format(totalSize * 1.0 / 1024 / 1024) + "MB";
        downloadProgressTv.setText(doneS + "/" + totalS);
    }

    private void installPage(FileBean filebean, Context context) {
        String filePath = Config.downLoadPath + "/" + filebean.getFileName();
        File file = new File(filePath);
        if (!file.exists()) {
//            throw new NullPointerException(
//                    "The package cannot be found");
            ToastUtils.showShort("文件不存在，请重新下载");
        }
        Intent install = new Intent(Intent.ACTION_VIEW);
        // 调用系统自带安装环境
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            install.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            Uri contentUri = FileProvider.getUriForFile(App.getApp(), getPackageName() + ".fileprovider", file);
            install.setDataAndType(contentUri, "application/vnd.android.package-archive");
        } else {
            install.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            install.setDataAndType(Uri.fromFile(file), "application/vnd.android.package-archive");
        }
        //install.setClassName("com.android.packageinstaller", "com.android.packageinstaller.PackageInstallerActivity");
        startActivity(install);
    }

}
